"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getClimateZoneByValue = exports.getLabelByValue = void 0;
function getLabelByValue(value, binningType, binningLabels, stops) {
    if (binningType === "range") {
        let labelIdx = -1;
        stops.forEach((stop, index) => {
            if (labelIdx === -1) {
                if (index === 0 && value < stop) {
                    labelIdx = 0;
                }
                else {
                    const range = [stops[index - 1], stop];
                    if (value >= range[0] && value < range[1]) {
                        labelIdx = index;
                    }
                }
            }
        });
        if (labelIdx === -1 && value >= stops[stops.length - 1]) {
            labelIdx = stops.length;
        }
        return binningLabels[labelIdx];
    }
    else if (binningType === "number") {
        let labelIdx = 0;
        stops.forEach((stop, index) => {
            if (stop === value) {
                labelIdx = index + 1;
            }
        });
        return binningLabels[labelIdx];
    }
}
exports.getLabelByValue = getLabelByValue;
function getClimateZoneByValue(datasetDescriptionResponse, midValue) {
    var _a;
    let climateZoneSubGroup;
    (_a = datasetDescriptionResponse.climate_zones) === null || _a === void 0 ? void 0 : _a.forEach((climateZonesDescription) => {
        climateZonesDescription.list.forEach((climateZone) => {
            if (parseInt(climateZone.value) === midValue) {
                climateZoneSubGroup = climateZone;
            }
        });
    });
    return climateZoneSubGroup;
}
exports.getClimateZoneByValue = getClimateZoneByValue;
