"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInitialMapViewState = exports.customTabletSizeForHeader = exports.size = exports.colors = void 0;
const mapConsts_1 = require("./mapConsts");
__exportStar(require("./mapConsts"), exports);
__exportStar(require("./styles"), exports);
__exportStar(require("./export-simple-map-html"), exports);
__exportStar(require("./export-compare-map-html"), exports);
__exportStar(require("./climateZones"), exports);
__exportStar(require("./datasets"), exports);
__exportStar(require("./dataDescriptionAtPlace"), exports);
exports.colors = {
    cream: "#f0f1e8",
    lightCream: "#f8f9f3",
    darkPurple: "#2a172d",
    white: "#fdfdfd",
    purple: "#851fff",
    grey: "#b6b4b7",
    lightGrey: "#cccccc",
    whiteSmoke: "#f5f5f5",
    blue: "#006CC9",
    silver: "#c0c0c0",
    textBlack: "#1b1a1c",
    red: "#da1720",
    black: "#000000",
    whiteOriginal: "#ffffff",
    dimBlack: "#1c101e",
    darkPurpleBackground: "#302530",
    secondaryGray: "#adadad",
    secondaryWhite: "#fefffc",
    primaryGray: "#a2a2a2",
    lightGrey2: "#787279",
};
exports.size = {
    mobile: "375px",
    mobileMax: "767px",
    tablet: "768px",
    tabletMax: "1199px",
    laptop: "1200px",
    desktop: "1441px",
};
exports.customTabletSizeForHeader = "800px";
const getInitialMapViewState = (hash) => {
    if (!hash) {
        return null;
    }
    const [zoom, latitude, longitude] = hash.split("/");
    return {
        zoom: Number.isNaN(zoom) ? mapConsts_1.INITIAL_ZOOM : Number(zoom),
        longitude: Number.isNaN(longitude) ? 0 : Number(longitude),
        latitude: Number.isNaN(latitude) ? 0 : Number(latitude),
    };
};
exports.getInitialMapViewState = getInitialMapViewState;
